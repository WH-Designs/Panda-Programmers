@model MusicCollaborationManager.ViewModels.UserDashboardViewModel

@{

}


<script src="https://open.spotify.com/embed-podcast/iframe-api/v1" async></script>
<div class="flex flex-col w-[88%] ml-10 md:-ml-64 md:w-3/4">
@if(@ViewBag.Error != null){
                    <div id='generator-alert' type=''>
                        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
                            <strong class="font-bold">Whoops.</strong>
                            <span class="block sm:inline">There was an error while creating your playlist. Log into Spotify and try again.</span>
                            <button id='alert-button' class="absolute top-0 bottom-0 right-0 px-4 py-3">
                                <svg class="fill-current h-6 w-6 text-red-500" role="button" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><title>Close</title><path d="M14.348 14.849a1.2 1.2 0 0 1-1.697 0L10 11.819l-2.651 3.029a1.2 1.2 0 1 1-1.697-1.697l2.758-3.15-2.759-3.152a1.2 1.2 0 1 1 1.697-1.697L10 8.183l2.651-3.031a1.2 1.2 0 1 1 1.697 1.697l-2.758 3.152 2.758 3.15a1.2 1.2 0 0 1 0 1.698z"/></svg>
                            </button>
                        </div>    
                    </div> 
                }
    <div class="w-auto bg-secondaryback classicpanda:bg-coreback shadow-xl shadow-gray-950 rounded-xl px-5 pt-6 pb-8 mb-4 overflow-hidden">
        <div>
            <img src="~/img/spotify-logo-white.png" class="w-32 h-10" />
            <h2 class="font-bold mb-5 mt-1 text-textback text-xl classicpanda:text-whitetext luxury:text-yellow-500">Recommended Tracks</h2>
        </div>
        <div class="flex flex-col gap-x-3 text-center text-lg">
            @{
                int UserTracksIndex = 0;
                if (Model.TopTracks.Count <= 0)
                {
                    <p class="mt-6 text-2xl text-textback classicpanda:text-whitetext text-center luxury:text-yellow-500">(No items to display)</p>
                }
                else
                {
                    <div class="flex flex-row gap-x-3 md:max-h-auto3 w-[340px] md:w-auto overflow-x-auto mr-8 md:mr-0 text-center text-lg">
                        @{
                            for (int UTOneIndex = 0; UTOneIndex < Model.TopTracks.Count; UTOneIndex++)
                            {
                                <div class="flex flex-col min-w-[200px] max-w-auto bg-primback text-textback p-2 rounded-lg">
                                    @{
                                        if (Model.TopTracks.ElementAt(UserTracksIndex).ImageURL != null)
                                        {
                                            <img src="@Model.TopTracks.ElementAt(UserTracksIndex).ImageURL">
                                        }
                                        <a href="@Model.TopTracks.ElementAt(UserTracksIndex).LinkToTrack">@Model.TopTracks.ElementAt(UserTracksIndex).Title</a>
                                        <p>@Model.TopTracks.ElementAt(UserTracksIndex).Artist</p>
                                        <button class="playable-item hover:text-textback classicpanda:text-blacktext" data-spotify-id="@Model.TopTracks.ElementAt(UserTracksIndex).Uri"><i class="fa-solid fa-play fa-xl"></i></button>
                                    }
                                </div>
                                UserTracksIndex++;
                                if (UserTracksIndex > 4)
                                { break; }
                            }
                        }
                    </div>
                    <div class="hidden extra-recom-tracks mt-4">
                        <div class="flex flex-row gap-x-3 md:max-h-auto w-[340px] md:w-[730px] lg:w-[916px] xl:w-[1400px] overflow-x-auto mr-8 md:mr-0 text-center text-lg">
                            @while (UserTracksIndex < Model.TopTracks.Count)
                            {
                                for (int UTTwoIndex = 0; UTTwoIndex < 4; UTTwoIndex++)
                                {
                                    <div class="flex flex-col min-w-[200px] max-w-auto bg-primback text-textback p-2 rounded-lg">
                                        @{
                                            if (Model.TopTracks.ElementAt(UserTracksIndex).ImageURL != null)
                                            {
                                                <img src="@Model.TopTracks.ElementAt(UserTracksIndex).ImageURL">
                                            }
                                            <a href="@Model.TopTracks.ElementAt(UserTracksIndex).LinkToTrack">@Model.TopTracks.ElementAt(UserTracksIndex).Title</a>
                                            <p>@Model.TopTracks.ElementAt(UserTracksIndex).Artist</p>
                                            <button class="playable-item hover:text-textback classicpanda:text-blacktext" data-spotify-id="@Model.TopTracks.ElementAt(UserTracksIndex).Uri"><i class="fa-solid fa-play fa-xl"></i></button>
                                        }
                                    </div>
                                    UserTracksIndex++;
                                    if (UserTracksIndex >= Model.TopTracks.Count)
                                    { break; }
                                }
                            }
                        </div>
                    </div>
                }
                if (20 <= Model.TopTracks.Count)
                {
                    <a role="button" href="https://open.spotify.com" id="link-to-spotify-recom-tracks" class="hidden text-center rounded bg-green-300">View more in Spotify</a>
                }

            }
            @{
                if (Model.TopTracks.Count > 5)
                {
                    <button class="text-textback classicpanda:text-whitetext luxury:text-yellow-500" id="toggle-recom-tracks-btn">Show more</button>
                }
            }
        </div>
    </div>

    <div class="w-auto bg-secondaryback classicpanda:bg-coreback shadow-xl shadow-gray-950 rounded-xl px-5 pt-6 pb-8 mb-4 overflow-hidden">
        <div>
            <img src="~/img/spotify-logo-white.png" class="w-32 h-10" />
            <h2 class="font-bold mb-5 mt-1 text-textback text-xl classicpanda:text-whitetext luxury:text-yellow-500">Featured Playlists</h2>
        </div>
        <div class="flex flex-col gap-x-3 text-center text-lg">
            @{
                if (Model.FeatPlaylists.Count <= 0)
                {
                    <p class="mt-6 text-2xl text-textback classicpanda:text-whitetext text-center luxury:text-yellow-500">(No items to display)</p>
                }
                else
                {
                    <div class="flex flex-row gap-x-3 md:max-h-auto3 w-[340px] md:w-auto overflow-x-auto mr-8 md:mr-0 text-center text-lg">
                        @{
                            int FeatPlayIndex = 0;
                            if (Model.FeatPlaylists.Count > 0)
                            {

                                for (int FpIOne = 0; FpIOne < Model.FeatPlaylists.Count; FpIOne++) //The first 5 playlists (which are always visible to the user)
                                {
                                    <div class="flex flex-col min-w-[200px] max-w-auto bg-primback text-textback p-2 rounded-lg">
                                        @{
                                            if (Model.FeatPlaylists.ElementAtOrDefault(FeatPlayIndex).ImageURL != null)
                                            {
                                                <form asp-controller="Listener" asp-action="Playlist">
                                                    <button name='playlistID' class="" aria-current="page" value="@Model.FeatPlaylists.ElementAt(FeatPlayIndex).ID"><img src="@Model.FeatPlaylists.ElementAtOrDefault(FeatPlayIndex).ImageURL"></button>
                                                </form>
                                            }
                                        }
                                        <a href="@Model.FeatPlaylists.ElementAt(FeatPlayIndex).LinkToPlaylist">@Model.FeatPlaylists.ElementAt(FeatPlayIndex).Name</a>
                                        <button class="playable-item hover:text-textback classicpanda:text-blacktext" data-spotify-id="@Model.FeatPlaylists.ElementAt(FeatPlayIndex).Uri"><i class="fa-solid fa-play fa-xl"></i></button>
                                    </div>
                                    FeatPlayIndex++;
                                    if (FeatPlayIndex > 4) { break; }
                                }
                            }
                        }
                    </div>
                    <div class="hidden extra-feat-playlists mt-4">
                        <div class="flex flex-row gap-x-3 md:max-h-auto3 w-[340px] md:w-[730px] lg:w-[916px] xl:w-[1400px] overflow-x-auto mr-8 md:mr-0 text-center text-lg">
                            @while (FeatPlayIndex < Model.FeatPlaylists.Count) //The extra 15 playlists (which the user can hide)
                            {
                                for (int FpITwo = 0; FpITwo < 5; FpITwo++)
                                {
                                    <div class="flex flex-col min-w-[200px] max-w-auto bg-primback text-textback p-2 rounded-lg">
                                        @{
                                            if (Model.FeatPlaylists.ElementAtOrDefault(FeatPlayIndex).ImageURL != null)
                                            {
                                                <form asp-controller="Listener" asp-action="Playlist">
                                                    <button name='playlistID' class="" aria-current="page" value="@Model.FeatPlaylists.ElementAt(FeatPlayIndex).ID"><img src="@Model.FeatPlaylists.ElementAtOrDefault(FeatPlayIndex).ImageURL"></button>
                                                </form>
                                            }
                                            <a href="@Model.FeatPlaylists.ElementAt(FeatPlayIndex).LinkToPlaylist">@Model.FeatPlaylists.ElementAt(FeatPlayIndex).Name</a>
                                            <button class="playable-item hover:text-textback classicpanda:text-blacktext" data-spotify-id="@Model.FeatPlaylists.ElementAt(FeatPlayIndex).Uri"><i class="fa-solid fa-play fa-xl"></i></button>
                                        }
                                    </div>
                                    FeatPlayIndex++;
                                    if (FeatPlayIndex >= Model.FeatPlaylists.Count)
                                    { break; }
                                }
                            }
                        </div>
                    </div>
                }
                if (20 <= Model.FeatPlaylists.Count)
                {
                    <a role="button" href="https://open.spotify.com" id="link-to-spotify-feat-playlists" class="hidden text-center rounded bg-green-300">View more in Spotify</a>
                }
            }
            @{
                if (Model.FeatPlaylists.Count > 5)
                {
                    <button class="text-textback classicpanda:text-whitetext luxury:text-yellow-500" id="toggle-feat-playlists-btn">Show more</button>
                }
            }
        </div>
    </div>

    <div class="w-auto bg-secondaryback classicpanda:bg-coreback shadow-xl shadow-gray-950 rounded-xl px-5 pt-6 pb-8 mb-4 overflow-hidden">
        <div>
            <img src="~/img/spotify-logo-white.png" class="w-32 h-10" />
            <h2 class="font-bold mb-5 mt-1 text-textback text-xl classicpanda:text-whitetext luxury:text-yellow-500">My Playlists</h2>
        </div>
        <div class="flex flex-col gap-x-3 text-center text-lg">
            @{
                int UserPlayIndex = 0;
                if (Model.UserPlaylists.Count <= 0)
                {
                    <p class="mt-6 text-2xl text-textback classicpanda:text-whitetext text-center luxury:text-yellow-500">(No items to display)</p>
                }
                else
                {
                    <div class="flex flex-row gap-x-3 md:max-h-auto3 w-[340px] md:w-auto overflow-x-auto mr-8 md:mr-0 text-center text-lg">
                        @{
                            for (int UpIOne = 0; UpIOne < Model.UserPlaylists.Count; UpIOne++) //The first 5 playlists (which are always visible to the user)
                            {
                                <div class="flex flex-col min-w-[200px] max-w-[285px] bg-primback text-textback p-2 rounded-lg">

                                    @{
                                        if (Model.UserPlaylists.ElementAtOrDefault(UserPlayIndex).ImageURL != null)
                                        {
                                            <form asp-controller="Listener" asp-action="Playlist">
                                                <button name='playlistID' class="" aria-current="page" value="@Model.UserPlaylists.ElementAt(UserPlayIndex).ID"><img src="@Model.UserPlaylists.ElementAtOrDefault(UserPlayIndex).ImageURL"></button>
                                            </form>
                                        }
                                    }
                                    <a href="@Model.UserPlaylists.ElementAt(UserPlayIndex).LinkToPlaylist">@Model.UserPlaylists.ElementAt(UserPlayIndex).Name</a>
                                    <button class="playable-item hover:text-textback classicpanda:text-blacktext" data-spotify-id="@Model.UserPlaylists.ElementAt(UserPlayIndex).Uri"><i class="fa-solid fa-play fa-xl"></i></button>

                                </div>

                                UserPlayIndex++;
                                if (UserPlayIndex > 4)
                                { break; }
                            }
                        }
                    </div>
                    <div class="hidden extra-user-playlists mt-4">
                        <div class="flex flex-row gap-x-3 md:max-h-auto3 w-[340px] md:w-[730px] lg:w-[916px] xl:w-[1400px] overflow-x-auto mr-8 md:mr-0 text-center text-lg">
                            @while (UserPlayIndex < Model.UserPlaylists.Count) //The extra 15 playlists (which the user can hide)
                            {
                                for (int UpITwo = 0; UpITwo < 5; UpITwo++)
                                {
                                    <div class="flex flex-col min-w-[200px] max-w-auto bg-primback text-textback p-2 rounded-lg">
                                        @{
                                            if (Model.UserPlaylists.ElementAt(UserPlayIndex).ImageURL != null)
                                            {
                                                <form asp-controller="Listener" asp-action="Playlist">
                                                    <button name='playlistID' class="" aria-current="page" value="@Model.UserPlaylists.ElementAt(UserPlayIndex).ID"><img src="@Model.UserPlaylists.ElementAtOrDefault(UserPlayIndex).ImageURL"></button>
                                                </form>
                                            }
                                        }
                                        <a href="@Model.UserPlaylists.ElementAt(UserPlayIndex).LinkToPlaylist">@Model.UserPlaylists.ElementAt(UserPlayIndex).Name</a>
                                        <button class="playable-item hover:text-textback classicpanda:text-blacktext" data-spotify-id="@Model.UserPlaylists.ElementAt(UserPlayIndex).Uri"><i class="fa-solid fa-play fa-xl"></i></button>
                                    </div>
                                    UserPlayIndex++;
                                    if (UserPlayIndex >= Model.UserPlaylists.Count)
                                    { break; }
                                }
                            }
                        </div>
                    </div>
                }
                if (20 <= Model.UserPlaylists.Count)
                {
                    <a role="button" href="https://open.spotify.com" id="link-to-spotify-user-playlists" class="hidden text-center rounded bg-green-300">View more in Spotify</a>
                }
            }
            @{
                if (Model.UserPlaylists.Count > 5)
                {
                    <button class="text-textback classicpanda:text-whitetext luxury:text-yellow-500" id="toggle-user-playlists-btn">Show more</button>
                }
            }
        </div>
    </div>
    <div class="mt-5" id="embed-iframe"></div>

    <div class="flex flex-col w-auto bg-secondaryback classicpanda:bg-coreback shadow-xl shadow-gray-950 rounded-xl px-5 pt-6 pb-8 mb-4">
        <img src="~/img/spotify-logo-white.png" class="w-32 h-10" />
        <h4 class="font-header font-bold mb-6 mt-2 text-textback classicpanda:text-whitetext luxury:text-yellow-500">Your Top Genres</h4>
        <div class="overflow-x-auto p-2 overflow-y-auto">
            <div class="flex flex-col md:h-auto h-[300px] md:flex-row md:gap-x-10 gap-y-4 text-center md:w-screen" id="userGenresContainer">
                
            </div>
        </div>
    </div>
</div>

    <script>

        window.onSpotifyIframeApiReady = (IFrameAPI) => {
            let element = document.getElementById('embed-iframe');
            let options = {
                width: '100%',
                height: '200',
                uri: 'spotify:track:4cktbXiXOapiLBMprHFErI' //Memories - Maroon 5

            };
            let callback = (EmbedController) => {
                document.querySelectorAll('.playable-item').forEach(
                    episode => {
                        episode.addEventListener('click', () => {
                            EmbedController.loadUri(episode.dataset.spotifyId)
                            EmbedController.play();
                        });
                    })
            };
            IFrameAPI.createController(element, options, callback);

        };
    </script>


    @section Scripts
        {
        <script src="~/lib/jquery/dist/jquery.min.js"></script>
        <script type="module" src="~/js/listenerindex.js"></script>

    }
    @*
    <!--------USER playlists (above)-------------------------->
    </div>
    <div id="embed-iframe"></div>
    </div>
    <div class="flex flex-col w-52 mx-5 text-textback">
    <div class="w-full my-1 p-3 bg-secondaryback classicpanda:bg-coreback rounded-lg text-center">
    <h4 class="font-header font-bold mb-6 mt-2 text-textback classicpanda:text-whitetext luxury:text-yellow-500">Your Top Genres</h4>
    <img src="~/img/Spotify_Logo_Black.png" class="ml-7 bg-white w-32 h-10" />
    <div class="bg-secondaryback classicpanda:bg-coreback text-center text-textback classicpanda:text-whitetext luxury:text-yellow-500" id="user-genre-0-container"></div>
    <div class="bg-secondaryback classicpanda:bg-coreback text-center text-textback classicpanda:text-whitetext luxury:text-yellow-500" id="user-genre-1-container"></div>
    <div class="bg-secondaryback classicpanda:bg-coreback text-center text-textback classicpanda:text-whitetext luxury:text-yellow-500" id="user-genre-2-container"></div>
    <div class="bg-secondaryback classicpanda:bg-coreback text-center text-textback classicpanda:text-whitetext luxury:text-yellow-500" id="user-genre-3-container"></div>
    <div class="bg-secondaryback classicpanda:bg-coreback text-center text-textback classicpanda:text-whitetext luxury:text-yellow-500" id="user-genre-4-container"></div>
    </div>
    </div>

    <script>

    window.onSpotifyIframeApiReady = (IFrameAPI) => {
    let element = document.getElementById('embed-iframe');
    let options = {
    width: '100%',
    height: '200',
    uri: 'spotify:track:4cktbXiXOapiLBMprHFErI' //Memories - Maroon 5

    };
    let callback = (EmbedController) => {
    document.querySelectorAll('.playable-item').forEach(
    episode => {
    episode.addEventListener('click', () => {
    EmbedController.loadUri(episode.dataset.spotifyId)
    EmbedController.play();
    });
    })
    };
    IFrameAPI.createController(element, options, callback);

    };
    </script>


    @section Scripts
    {
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script type="module" src="~/js/listenerindex.js"></script>
    <script type="text/javascript" src="~/js/colorchanger.js"></script>
    }


    *@
